-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from parser.y
-----------------------------------------------------------------------------

state 70 contains 9 shift/reduce conflicts.
state 72 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Expr                                (0)
	Expr -> Expr1                                      (1)
	Expr -> ExprArith                                  (2)
	Expr -> ExprBool                                   (3)
	Expr1 -> int                                       (4)
	Expr1 -> '[' int ']'                               (5)
	Expr1 -> float                                     (6)
	Expr1 -> '[' float ']'                             (7)
	Expr1 -> bool                                      (8)
	Expr1 -> '[' bool ']'                              (9)
	Expr1 -> var                                       (10)
	Expr1 -> '(' Expr ')'                              (11)
	Expr1 -> '(' Expr ')' '(' Expr ')'                 (12)
	Expr1 -> "if" ExprBool "then" Expr1 "else" Expr1   (13)
	Expr1 -> '\\' var '.' Type ':' Expr                (14)
	Expr1 -> '<' Type "<=" Type ',' label '>' Expr     (15)
	Expr1 -> "none"                                    (16)
	ExprArith -> Expr '+' Expr1                        (17)
	ExprArith -> Expr '-' Expr1                        (18)
	ExprArith -> Expr '*' Expr1                        (19)
	ExprArith -> Expr '/' Expr1                        (20)
	ExprBool -> Expr "<=" Expr1                        (21)
	ExprBool -> Expr ">=" Expr1                        (22)
	ExprBool -> Expr '<' Expr1                         (23)
	ExprBool -> Expr '>' Expr1                         (24)
	ExprBool -> Expr "==" Expr1                        (25)
	Type -> "Int"                                      (26)
	Type -> "Float"                                    (27)
	Type -> "Bool"                                     (28)
	Type -> "Dyn"                                      (29)
	Type -> Type "->" Type1                            (30)
	Type1 -> "Int"                                     (31)
	Type1 -> "Float"                                   (32)
	Type1 -> "Bool"                                    (33)
	Type1 -> "Dyn"                                     (34)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt $$ }
	float          { TokenFloat $$ }
	bool           { TokenBool $$ }
	var            { TokenVar $$ }
	label          { TokenLabel $$ }
	"Int"          { TokenStringInt }
	"Float"        { TokenStringFloat }
	"Bool"         { TokenStringBool }
	"Dyn"          { TokenStringDyn }
	'\\'           { TokenLambda }
	"=="           { TokenEq }
	">="           { TokenBiggerEq }
	"<="           { TokenLessEq }
	"->"           { TokenArrow }
	'+'            { TokenAdd }
	'-'            { TokenSub }
	'*'            { TokenMul }
	'/'            { TokenDiv }
	'<'            { TokenLess }
	'>'            { TokenBigger }
	'.'            { TokenDot }
	':'            { TokenColon }
	','            { TokenComma }
	'('            { TokenOBrack }
	')'            { TokenCBrack }
	'['            { TokenOSquare }
	']'            { TokenCSquare }
	"if"           { TokenIf }
	"then"         { TokenThen }
	"else"         { TokenElse }
	"none"         { TokenNone }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Expr            rules 1, 2, 3
	Expr1           rules 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
	ExprArith       rules 17, 18, 19, 20
	ExprBool        rules 21, 22, 23, 24, 25
	Type            rules 26, 27, 28, 29, 30
	Type1           rules 31, 32, 33, 34

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 13
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 15

State 1


	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 2

State 2

	Expr -> Expr1 .                                     (rule 1)

	"=="           reduce using rule 1
	">="           reduce using rule 1
	"<="           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	'/'            reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	')'            reduce using rule 1
	"then"         reduce using rule 1
	"else"         reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expr1 -> int .                                      (rule 4)

	"=="           reduce using rule 4
	">="           reduce using rule 4
	"<="           reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	')'            reduce using rule 4
	"then"         reduce using rule 4
	"else"         reduce using rule 4
	%eof           reduce using rule 4


State 4

	Expr1 -> float .                                    (rule 6)

	"=="           reduce using rule 6
	">="           reduce using rule 6
	"<="           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	')'            reduce using rule 6
	"then"         reduce using rule 6
	"else"         reduce using rule 6
	%eof           reduce using rule 6


State 5

	Expr1 -> bool .                                     (rule 8)

	"=="           reduce using rule 8
	">="           reduce using rule 8
	"<="           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	')'            reduce using rule 8
	"then"         reduce using rule 8
	"else"         reduce using rule 8
	%eof           reduce using rule 8


State 6

	Expr1 -> var .                                      (rule 10)

	"=="           reduce using rule 10
	">="           reduce using rule 10
	"<="           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	')'            reduce using rule 10
	"then"         reduce using rule 10
	"else"         reduce using rule 10
	%eof           reduce using rule 10


State 7

	Expr1 -> '\\' . var '.' Type ':' Expr               (rule 14)

	var            shift, and enter state 36


State 8

	Expr1 -> '<' . Type "<=" Type ',' label '>' Expr    (rule 15)

	"Int"          shift, and enter state 32
	"Float"        shift, and enter state 33
	"Bool"         shift, and enter state 34
	"Dyn"          shift, and enter state 35

	Type           goto state 31

State 9

	Expr1 -> '(' . Expr ')'                             (rule 11)
	Expr1 -> '(' . Expr ')' '(' Expr ')'                (rule 12)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 30
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 15

State 10

	Expr1 -> '[' . int ']'                              (rule 5)
	Expr1 -> '[' . float ']'                            (rule 7)
	Expr1 -> '[' . bool ']'                             (rule 9)

	int            shift, and enter state 27
	float          shift, and enter state 28
	bool           shift, and enter state 29


State 11

	Expr1 -> "if" . ExprBool "then" Expr1 "else" Expr1    (rule 13)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 25
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 26

State 12

	Expr1 -> "none" .                                   (rule 16)

	"=="           reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	')'            reduce using rule 16
	"then"         reduce using rule 16
	"else"         reduce using rule 16
	%eof           reduce using rule 16


State 13

	%start_calc -> Expr .                               (rule 0)
	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
	">="           shift, and enter state 17
	"<="           shift, and enter state 18
	'+'            shift, and enter state 19
	'-'            shift, and enter state 20
	'*'            shift, and enter state 21
	'/'            shift, and enter state 22
	'<'            shift, and enter state 23
	'>'            shift, and enter state 24
	%eof           accept


State 14

	Expr -> ExprArith .                                 (rule 2)

	"=="           reduce using rule 2
	">="           reduce using rule 2
	"<="           reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	')'            reduce using rule 2
	"then"         reduce using rule 2
	"else"         reduce using rule 2
	%eof           reduce using rule 2


State 15

	Expr -> ExprBool .                                  (rule 3)

	"=="           reduce using rule 3
	">="           reduce using rule 3
	"<="           reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	')'            reduce using rule 3
	"then"         reduce using rule 3
	"else"         reduce using rule 3
	%eof           reduce using rule 3


State 16

	ExprBool -> Expr "==" . Expr1                       (rule 25)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 53

State 17

	ExprBool -> Expr ">=" . Expr1                       (rule 22)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 52

State 18

	ExprBool -> Expr "<=" . Expr1                       (rule 21)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 51

State 19

	ExprArith -> Expr '+' . Expr1                       (rule 17)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 50

State 20

	ExprArith -> Expr '-' . Expr1                       (rule 18)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 49

State 21

	ExprArith -> Expr '*' . Expr1                       (rule 19)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 48

State 22

	ExprArith -> Expr '/' . Expr1                       (rule 20)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 47

State 23

	ExprBool -> Expr '<' . Expr1                        (rule 23)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 46

State 24

	ExprBool -> Expr '>' . Expr1                        (rule 24)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 45

State 25

	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
	">="           shift, and enter state 17
	"<="           shift, and enter state 18
	'+'            shift, and enter state 19
	'-'            shift, and enter state 20
	'*'            shift, and enter state 21
	'/'            shift, and enter state 22
	'<'            shift, and enter state 23
	'>'            shift, and enter state 24


State 26

	Expr -> ExprBool .                                  (rule 3)
	Expr1 -> "if" ExprBool . "then" Expr1 "else" Expr1    (rule 13)

	"=="           reduce using rule 3
	">="           reduce using rule 3
	"<="           reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	"then"         shift, and enter state 44


State 27

	Expr1 -> '[' int . ']'                              (rule 5)

	']'            shift, and enter state 43


State 28

	Expr1 -> '[' float . ']'                            (rule 7)

	']'            shift, and enter state 42


State 29

	Expr1 -> '[' bool . ']'                             (rule 9)

	']'            shift, and enter state 41


State 30

	Expr1 -> '(' Expr . ')'                             (rule 11)
	Expr1 -> '(' Expr . ')' '(' Expr ')'                (rule 12)
	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
	">="           shift, and enter state 17
	"<="           shift, and enter state 18
	'+'            shift, and enter state 19
	'-'            shift, and enter state 20
	'*'            shift, and enter state 21
	'/'            shift, and enter state 22
	'<'            shift, and enter state 23
	'>'            shift, and enter state 24
	')'            shift, and enter state 40


State 31

	Expr1 -> '<' Type . "<=" Type ',' label '>' Expr    (rule 15)
	Type -> Type . "->" Type1                           (rule 30)

	"<="           shift, and enter state 38
	"->"           shift, and enter state 39


State 32

	Type -> "Int" .                                     (rule 26)

	"<="           reduce using rule 26
	"->"           reduce using rule 26
	':'            reduce using rule 26
	','            reduce using rule 26


State 33

	Type -> "Float" .                                   (rule 27)

	"<="           reduce using rule 27
	"->"           reduce using rule 27
	':'            reduce using rule 27
	','            reduce using rule 27


State 34

	Type -> "Bool" .                                    (rule 28)

	"<="           reduce using rule 28
	"->"           reduce using rule 28
	':'            reduce using rule 28
	','            reduce using rule 28


State 35

	Type -> "Dyn" .                                     (rule 29)

	"<="           reduce using rule 29
	"->"           reduce using rule 29
	':'            reduce using rule 29
	','            reduce using rule 29


State 36

	Expr1 -> '\\' var . '.' Type ':' Expr               (rule 14)

	'.'            shift, and enter state 37


State 37

	Expr1 -> '\\' var '.' . Type ':' Expr               (rule 14)

	"Int"          shift, and enter state 32
	"Float"        shift, and enter state 33
	"Bool"         shift, and enter state 34
	"Dyn"          shift, and enter state 35

	Type           goto state 62

State 38

	Expr1 -> '<' Type "<=" . Type ',' label '>' Expr    (rule 15)

	"Int"          shift, and enter state 32
	"Float"        shift, and enter state 33
	"Bool"         shift, and enter state 34
	"Dyn"          shift, and enter state 35

	Type           goto state 61

State 39

	Type -> Type "->" . Type1                           (rule 30)

	"Int"          shift, and enter state 57
	"Float"        shift, and enter state 58
	"Bool"         shift, and enter state 59
	"Dyn"          shift, and enter state 60

	Type1          goto state 56

State 40

	Expr1 -> '(' Expr ')' .                             (rule 11)
	Expr1 -> '(' Expr ')' . '(' Expr ')'                (rule 12)

	"=="           reduce using rule 11
	">="           reduce using rule 11
	"<="           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	'('            shift, and enter state 55
	')'            reduce using rule 11
	"then"         reduce using rule 11
	"else"         reduce using rule 11
	%eof           reduce using rule 11


State 41

	Expr1 -> '[' bool ']' .                             (rule 9)

	"=="           reduce using rule 9
	">="           reduce using rule 9
	"<="           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	')'            reduce using rule 9
	"then"         reduce using rule 9
	"else"         reduce using rule 9
	%eof           reduce using rule 9


State 42

	Expr1 -> '[' float ']' .                            (rule 7)

	"=="           reduce using rule 7
	">="           reduce using rule 7
	"<="           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	')'            reduce using rule 7
	"then"         reduce using rule 7
	"else"         reduce using rule 7
	%eof           reduce using rule 7


State 43

	Expr1 -> '[' int ']' .                              (rule 5)

	"=="           reduce using rule 5
	">="           reduce using rule 5
	"<="           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	')'            reduce using rule 5
	"then"         reduce using rule 5
	"else"         reduce using rule 5
	%eof           reduce using rule 5


State 44

	Expr1 -> "if" ExprBool "then" . Expr1 "else" Expr1    (rule 13)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 54

State 45

	ExprBool -> Expr '>' Expr1 .                        (rule 24)

	"=="           reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	')'            reduce using rule 24
	"then"         reduce using rule 24
	"else"         reduce using rule 24
	%eof           reduce using rule 24


State 46

	ExprBool -> Expr '<' Expr1 .                        (rule 23)

	"=="           reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	')'            reduce using rule 23
	"then"         reduce using rule 23
	"else"         reduce using rule 23
	%eof           reduce using rule 23


State 47

	ExprArith -> Expr '/' Expr1 .                       (rule 20)

	"=="           reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	')'            reduce using rule 20
	"then"         reduce using rule 20
	"else"         reduce using rule 20
	%eof           reduce using rule 20


State 48

	ExprArith -> Expr '*' Expr1 .                       (rule 19)

	"=="           reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	')'            reduce using rule 19
	"then"         reduce using rule 19
	"else"         reduce using rule 19
	%eof           reduce using rule 19


State 49

	ExprArith -> Expr '-' Expr1 .                       (rule 18)

	"=="           reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	')'            reduce using rule 18
	"then"         reduce using rule 18
	"else"         reduce using rule 18
	%eof           reduce using rule 18


State 50

	ExprArith -> Expr '+' Expr1 .                       (rule 17)

	"=="           reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	')'            reduce using rule 17
	"then"         reduce using rule 17
	"else"         reduce using rule 17
	%eof           reduce using rule 17


State 51

	ExprBool -> Expr "<=" Expr1 .                       (rule 21)

	"=="           reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	')'            reduce using rule 21
	"then"         reduce using rule 21
	"else"         reduce using rule 21
	%eof           reduce using rule 21


State 52

	ExprBool -> Expr ">=" Expr1 .                       (rule 22)

	"=="           reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	')'            reduce using rule 22
	"then"         reduce using rule 22
	"else"         reduce using rule 22
	%eof           reduce using rule 22


State 53

	ExprBool -> Expr "==" Expr1 .                       (rule 25)

	"=="           reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	')'            reduce using rule 25
	"then"         reduce using rule 25
	"else"         reduce using rule 25
	%eof           reduce using rule 25


State 54

	Expr1 -> "if" ExprBool "then" Expr1 . "else" Expr1    (rule 13)

	"else"         shift, and enter state 66


State 55

	Expr1 -> '(' Expr ')' '(' . Expr ')'                (rule 12)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 65
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 15

State 56

	Type -> Type "->" Type1 .                           (rule 30)

	"<="           reduce using rule 30
	"->"           reduce using rule 30
	':'            reduce using rule 30
	','            reduce using rule 30


State 57

	Type1 -> "Int" .                                    (rule 31)

	"<="           reduce using rule 31
	"->"           reduce using rule 31
	':'            reduce using rule 31
	','            reduce using rule 31


State 58

	Type1 -> "Float" .                                  (rule 32)

	"<="           reduce using rule 32
	"->"           reduce using rule 32
	':'            reduce using rule 32
	','            reduce using rule 32


State 59

	Type1 -> "Bool" .                                   (rule 33)

	"<="           reduce using rule 33
	"->"           reduce using rule 33
	':'            reduce using rule 33
	','            reduce using rule 33


State 60

	Type1 -> "Dyn" .                                    (rule 34)

	"<="           reduce using rule 34
	"->"           reduce using rule 34
	':'            reduce using rule 34
	','            reduce using rule 34


State 61

	Expr1 -> '<' Type "<=" Type . ',' label '>' Expr    (rule 15)
	Type -> Type . "->" Type1                           (rule 30)

	"->"           shift, and enter state 39
	','            shift, and enter state 64


State 62

	Expr1 -> '\\' var '.' Type . ':' Expr               (rule 14)
	Type -> Type . "->" Type1                           (rule 30)

	"->"           shift, and enter state 39
	':'            shift, and enter state 63


State 63

	Expr1 -> '\\' var '.' Type ':' . Expr               (rule 14)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 70
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 15

State 64

	Expr1 -> '<' Type "<=" Type ',' . label '>' Expr    (rule 15)

	label          shift, and enter state 69


State 65

	Expr1 -> '(' Expr ')' '(' Expr . ')'                (rule 12)
	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
	">="           shift, and enter state 17
	"<="           shift, and enter state 18
	'+'            shift, and enter state 19
	'-'            shift, and enter state 20
	'*'            shift, and enter state 21
	'/'            shift, and enter state 22
	'<'            shift, and enter state 23
	'>'            shift, and enter state 24
	')'            shift, and enter state 68


State 66

	Expr1 -> "if" ExprBool "then" Expr1 "else" . Expr1    (rule 13)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr1          goto state 67

State 67

	Expr1 -> "if" ExprBool "then" Expr1 "else" Expr1 .    (rule 13)

	"=="           reduce using rule 13
	">="           reduce using rule 13
	"<="           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	')'            reduce using rule 13
	"then"         reduce using rule 13
	"else"         reduce using rule 13
	%eof           reduce using rule 13


State 68

	Expr1 -> '(' Expr ')' '(' Expr ')' .                (rule 12)

	"=="           reduce using rule 12
	">="           reduce using rule 12
	"<="           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	')'            reduce using rule 12
	"then"         reduce using rule 12
	"else"         reduce using rule 12
	%eof           reduce using rule 12


State 69

	Expr1 -> '<' Type "<=" Type ',' label . '>' Expr    (rule 15)

	'>'            shift, and enter state 71


State 70

	Expr1 -> '\\' var '.' Type ':' Expr .               (rule 14)
	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
			(reduce using rule 14)

	">="           shift, and enter state 17
			(reduce using rule 14)

	"<="           shift, and enter state 18
			(reduce using rule 14)

	'+'            shift, and enter state 19
			(reduce using rule 14)

	'-'            shift, and enter state 20
			(reduce using rule 14)

	'*'            shift, and enter state 21
			(reduce using rule 14)

	'/'            shift, and enter state 22
			(reduce using rule 14)

	'<'            shift, and enter state 23
			(reduce using rule 14)

	'>'            shift, and enter state 24
			(reduce using rule 14)

	')'            reduce using rule 14
	"then"         reduce using rule 14
	"else"         reduce using rule 14
	%eof           reduce using rule 14


State 71

	Expr1 -> '<' Type "<=" Type ',' label '>' . Expr    (rule 15)

	int            shift, and enter state 3
	float          shift, and enter state 4
	bool           shift, and enter state 5
	var            shift, and enter state 6
	'\\'           shift, and enter state 7
	'<'            shift, and enter state 8
	'('            shift, and enter state 9
	'['            shift, and enter state 10
	"if"           shift, and enter state 11
	"none"         shift, and enter state 12

	Expr           goto state 72
	Expr1          goto state 2
	ExprArith      goto state 14
	ExprBool       goto state 15

State 72

	Expr1 -> '<' Type "<=" Type ',' label '>' Expr .    (rule 15)
	ExprArith -> Expr . '+' Expr1                       (rule 17)
	ExprArith -> Expr . '-' Expr1                       (rule 18)
	ExprArith -> Expr . '*' Expr1                       (rule 19)
	ExprArith -> Expr . '/' Expr1                       (rule 20)
	ExprBool -> Expr . "<=" Expr1                       (rule 21)
	ExprBool -> Expr . ">=" Expr1                       (rule 22)
	ExprBool -> Expr . '<' Expr1                        (rule 23)
	ExprBool -> Expr . '>' Expr1                        (rule 24)
	ExprBool -> Expr . "==" Expr1                       (rule 25)

	"=="           shift, and enter state 16
			(reduce using rule 15)

	">="           fail
	"<="           fail
	'+'            shift, and enter state 19
	'-'            shift, and enter state 20
	'*'            shift, and enter state 21
	'/'            shift, and enter state 22
	'<'            fail
	'>'            fail
	')'            reduce using rule 15
	"then"         reduce using rule 15
	"else"         reduce using rule 15
	%eof           reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 35
Number of terminals: 31
Number of non-terminals: 7
Number of states: 73
